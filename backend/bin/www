#!/usr/bin/env node
const asyncHandler = require('express-async-handler');
const { port } = require('../config');
const app = require('../app');
const { ChannelMessage } = require('../db/models');
const { singlePublicFileUpload, singleMulterUpload } = require('../awsS3')

const httpServer = require('http').createServer(app);
const db = require('../db/models');
const io = require('socket.io')(httpServer);

const postMessage = async (channelMessage) => {
  singleMulterUpload("image")
  const { 
    channelId,
    userId,
    messageText,
  } = channelMessage;
  let messageImg;
  if (channelMessage.messageImg !== null) {
    console.log('this is the channelMessage.messageImg - - - >  ', channelMessage.messageImg)
    messageImg = await singlePublicFileUpload(channelMessage.messageImg);
    console.log('this is the messageImg - - - >  ', messageImg)
  }
  ChannelMessage.createChannelMessage({ 
    channelId,
    userId,
    messageText,
    messageImg,
  });
} 


// const postMessage = (channelMessage) => {
//   const { channelId, userId, messageText, messageImg } = channelMessage;
//   ChannelMessage.createChannelMessage({ 
//     channelId,
//     userId,
//     messageText,
//     messageImg,
//   });
// }

// Check the database connection before starting the app
db.sequelize
  .authenticate()
  .then(() => {
    console.log('Database connection success! Sequelize is ready to use...');
    //run when client connects


    io.on('connection', socket => {
      
      //this is to a single client (current user)

      socket.on('join_channel', format => {
        socket.emit(`message`, `Welcome to Shrewdness`)
        socket.broadcast.emit(`message`, `User has joined the chat room`);
      })
      
      socket.on('disconnect', () => {
        io.emit('message', 'user has left the chat')
      })
      
      socket.on('chatMessage', (msg) => {
        postMessage(msg);
        io.emit(`chat_message_${msg.channelId}`);
      })
    });

    // Start listening for connections
    httpServer.listen(port, () => console.log(`Listening on port ${port}...`));
  })
  .catch((err) => {
    console.log('Database connection failure.');
    console.error(err);
  });