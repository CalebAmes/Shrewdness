#!/usr/bin/env node
const { port } = require('../config');
const app = require('../app');
const { ChannelMessage } = require('../db/models');

const httpServer = require('http').createServer(app);
const db = require('../db/models');
const io = require('socket.io')(httpServer);

const createChannelMessage = (channelMessage) => {
  const { channelId, userId, messageText, messageImg } = channelMessage;
  ChannelMessage.createChannelMessage({ 
    channelId,
    userId,
    messageText,
    messageImg,
  });
}

// Check the database connection before starting the app
db.sequelize
  .authenticate()
  .then(() => {
    console.log('Database connection success! Sequelize is ready to use...');
    //run when client connects


    io.on('connection', socket => {
      
      //this is to a single client (current user)

      socket.on('join_channel', format => {
        // console.log(format.channel);
        // console.log(format.user);
        // if(format?.channel && format?.user){
        //   socket.emit(`join_channel_res_${format.channel.id}`, `Welcome to Shrewdness ${format.user.username}`)
        //   // socket.broadcast.emit(`join_channel_res_${format.channel.id}`, `${format.user.username} has joined the ${format.channel.name} chat room`);
        // }else{
          socket.emit(`message`, `Welcome to Shrewdness`)
          socket.broadcast.emit(`message`, `User has joined the chat room`);
        // }
      })

      // socket.on('is_typing')
      
      //broadcast (to other users) when a user connections
      //to everyone except user
      
      //broadcasts to everyone, including the current user
      // io.emit()
      
      // Runs when a client disconnects (yes it needs 
      //to be inside of the connection)
      
      //listen for a chat message
      
      // console.log('socket connection');
      
      socket.on('disconnect', () => {
        io.emit('message', 'user has left the chat')
      })
      
      socket.on('chatMessage', (msg) => {
        createChannelMessage(msg);
        io.emit(`chat_message_${msg.channelId}`, msg.messageText);
      })
    });

    // Start listening for connections
    httpServer.listen(port, () => console.log(`Listening on port ${port}...`));
  })
  .catch((err) => {
    console.log('Database connection failure.');
    console.error(err);
  });